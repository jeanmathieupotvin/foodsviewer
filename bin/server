#!/usr/bin/env node

/*!
 * =============================================================================
 * Node server
 * =============================================================================
 */

// Import packages.
const http  = require('http');
const debug = require('debug')('foodsviewer:server');

// Import app.
const app = require('../app');

/*!
 * =============================================================================
 * Callbacks
 * =============================================================================
 */

/**
 * Normalize a port into a number, a string, or a default falsy value.
 * 
 * @param {number|string|boolean} val - A value. It represents a port or a 
 *     named pipe.
 * @returns {number|string|boolean} A named pipe, a port number or a falsy
 *     value.
 */
const normalizePort = val => {
   // Try parsing val into a number.
  const port = parseInt(val, 10);

  // If it's not a number, then it's a string
  // naming a pipe and we return it. Else, we
  // check if it's greater than 0. If it is,
  // then it's a port number and we return it.
  // Else, we return a falsy value.
  return isNaN(port) 
      ? val 
      : (port >= 0) ? port : false;
}

/**
 * Callback for server-related errors.
 * 
 * @param {Object} - A node Error object.
 * @returns {undefined} Callback shutdowns the server process on any error.
 */
const onError = error => {
  // If event does not stem from listening event, then just throw the error.
  if (error.syscall !== 'listen') {
      throw error;
  }

  // Create custom string based from port.
  let portString = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  
  // Construct friendly messages from standard error codes.
  switch (error.code) {
      case 'EACCES':
          console.error(`${portString} requires elevated privileges.`);
          process.exit(1);
          break;
      case 'EADDRINUSE':
          console.error(`${portString} is already in use.`);
          process.exit(1);
          break;
      default:
          throw error;
  }
}

/**
 * Callback used when server starts listening on a port.
 * 
 * @returns {undefined}
 */
const onListening = () => {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;

  debug(`Listening on ${bind}.`);
}

/*!
 * =============================================================================
 * Instantiate HTTP server
 * =============================================================================
 */

// Get port from environment, normalize it, and set it.
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create a server instance.
const server = http.createServer(app);

// Set callbacks.
server.on('error', onError);
server.on('listening', onListening);

// Listen on supplied port.
server.listen(port);
